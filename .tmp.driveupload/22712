---
title: "Data EDA"
format:
  html:
    code-fold: true
    theme: custom.scss
    toc: true
    toc_float:
      collapsed: false
      smooth_scroll: true
      df_print: paged
---

```{r,echo=FALSE,message=FALSE, warning=FALSE}
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
```



## SPY Time Series Plot


```{r}
spy <- getSymbols("SPY",auto.assign = FALSE, from = "2017-10-01",src="yahoo") 
spy=data.frame(spy)
spy <- data.frame(spy,rownames(spy))

colnames(spy)[7] = "date"

spy$date<-as.Date(spy$date,"%Y-%m-%d")

plot_ly(spy, x = ~date, y = ~SPY.Adjusted, type = "scatter", mode = "lines") %>%
  layout(title = "SPY Adjusted Price Time Series", yaxis = list(title = "SPY Price"))

ts_adjusted <- as.ts(spy[,"SPY.Adjusted"], frequency = 1)
```


- Trend: There appears to be an overall upward trend in the price of SPY over the period from October 2017 to February 2023.
- Seasonality: There does not appear to be a clear seasonal pattern in the data.
- Variation: There is significant variation in the price of SPY over the period, with some periods of rapid growth and some periods of decline.
- Periodic fluctuations: There may be some periodic fluctuations in the data, but they are not clear from this plot. It is possible that a more detailed analysis of the data would reveal periodic fluctuations at different time scales.

In terms of whether the time series is multiplicative or additive, it's difficult to tell definitively from the plot alone. A common approach to determining whether a time series is multiplicative or additive is to decompose it into its components (trend, seasonality, etc.) 

### Lag plot

```{r}
ts_lags(ts_adjusted, lags=1:6)
```


The lag plot of SPY shown an steady upward trend, suggests the presence of positive autocorrelation in the SPY stock price and it's lagged price. It suggests that past values of the time series **can be used to predict** future values, and that simple models that assume the time series is constant over time may not be appropriate.

### Decompose of the SPY time series plot (Not Applicatable)


```{r}
# Decompose the time series
try({decomp <- decompose(ts_adjusted)})
```


From the code we have learn that this dataset has **no periods**, it means that there is no clear and consistent repeating pattern in the data. Thus the traditional decompose() or stl() dosn't work on the dataset.

In general, stock prices are considered to be non-periodic because they do not exhibit a clear and consistent repeating pattern over time with a fixed period. The fluctuations in stock prices are influenced by a complex and ever-changing set of factors, such as company performance, economic indicators, geopolitical events, and investor sentiment, among others. These factors can cause stock prices to rise or fall in unpredictable ways that are difficult to forecast.

## Detrending and Differencing

```{r,message=FALSE, warning=FALSE}
require(gridExtra)

fit = lm(ts_adjusted~time(ts_adjusted), na.action=NULL) 
# regress stock price on time
# time creates the vector of times at which a time series was sampled.

plot1<-autoplot(resid(fit), main="Detrended") 
plot2<-autoplot(diff(ts_adjusted), main="First Differences") 

grid.arrange(plot1, plot2,nrow=2)
```


From the graph we can see that detrending (the residuals of the linear regression model fit to the time series) the time series doesn't remove the  patterns or trends in the residuals, indicating the linear model is not a good fit for the data. 

However, differencing (the change in value from one time period to the next) successfully make the distributed around zero, which means that there is no systematic increase or decrease in the values of the time series from one time period to the next. In other words, the difference between consecutive observations in the time series is centered around zero, indicating the first order differences of SPY is **stationary**.

## ACF and PACF plot


```{r,message=FALSE, warning=FALSE}
plot3 <- ggAcf(diff(ts_adjusted))+ggtitle("ACF of First Differences of SPY Adjusted Close Price")
plot4 <- ggPacf(diff(ts_adjusted))+ggtitle("PACF of First Differences of SPY Adjusted Close Price")

grid.arrange(plot3, plot4,nrow=2)
```



## Linear regression on the fit the SPY dataset


```{r,message=FALSE, warning=FALSE}
library(knitr)
summary_table = summary(fit)$coefficients
# Extract the coefficient table from the summary

kable(summary_table, caption = "Regression Results", align = "c")
```

```{r, message=FALSE, warning= FALSE}
y=ts_adjusted
x=time(ts_adjusted)
DD<-data.frame(x,y)
ggp <- ggplot(DD, aes(x, y)) +           
  geom_line()

ggp +                                     
  stat_smooth(method = "lm",
              formula = y ~ x,
              geom = "smooth") +ggtitle("The adjusted SPY closed price")+ylab("Price(USD)")
```
