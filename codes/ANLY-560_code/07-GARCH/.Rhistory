# Function to fit GARCH model with given order and return AIC
fit_garch <- function(p, q, data, solver = "solnp") {
garch_spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(p, q)),
mean.model = list(armaOrder = c(0, 0), include.mean = FALSE),
distribution.model = "std",
start.pars = list(alpha1 = 0.1, beta1 = 0.8, omega = 0.01))
garch_model <- tryCatch(ugarchfit(spec = garch_spec, data = data, solver = solver, fit.control = list(stationarity = 1, fixed.se = 1)),
error = function(e) return(NULL))
if (is.null(garch_model)) {
return(NA)
} else {
return(infocriteria(garch_model)["Akaike"])
}
}
# Define the range of orders to test
p_range <- 1:3
q_range <- 1:3
# Fit GARCH models for all combinations of p and q and store AIC values
aic_matrix <- matrix(NA, nrow = length(p_range), ncol = length(q_range),
dimnames = list(p = p_range, q = q_range))
for (p in p_range) {
for (q in q_range) {
aic_matrix[p, q] <- fit_garch(p, q, return_spy)
}
}
# Specify the GARCH model
garch_spy <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 2)),
mean.model = list(armaOrder = c(3, 0), include.mean = FALSE),
distribution.model = "std")
# Fit the GARCH model
garch_model <- ugarchfit(spec = garch_spy, data = return_spy)
garch_model
arima.fit<-Arima(spy_returns,order=c(3,2,0),include.drift = TRUE)
arima.res<-arima.fit$residuals
p5=acf(arima.res)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
p5=acf(arima.res)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
arima.res <- na.omit(arima.res)
p5=acf(arima.res)
p6=acf(arima.res^2)
p7=pacf(arima.res^2)
grid.arrange(p5,p6,p7, nrow=3)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
arima.res <- na.omit(arima.res)
p6=acf(arima.res^2)
p7=pacf(arima.res^2)
grid.arrange(p5,p6,p7, nrow=2)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
arima.res <- na.omit(arima.res)
p6=ggAcf(arima.res^2)
p7=ggPacf(arima.res^2)
grid.arrange(p5,p6,p7, nrow=2)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
arima.res <- na.omit(arima.res)
p6=ggAcf(arima.res^2)
p7=ggPacf(arima.res^2)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
arima.res <- na.omit(arima.res)
ggAcf(arima.res^2)
ggPacf(arima.res^2)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
arima.res <- na.omit(arima.res)
acf(arima.res^2)
pacf(arima.res^2)
model <- list() ## set counter
cc <- 1
for (p in 1:4) {
for (q in 1:5) {
model[[cc]] <- garch(arima.res,order=c(q,p),trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
which(GARCH_AIC == min(GARCH_AIC))
model[[which(GARCH_AIC == min(GARCH_AIC))]]
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(arima.res, order=c(p, q), trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
best_model_index <- which(GARCH_AIC == min(GARCH_AIC))
best_model <- model[[best_model_index]]
p <- (best_model_index - 1) %% 7 + 1
q <- floor((best_model_index - 1) / 7) + 1
cat("Best model:", "GARCH(", p, ",", q, ")\n", sep="")
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(arima.res, order=c(p, q), trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
best_model_index <- which(GARCH_AIC == min(GARCH_AIC))
best_model <- model[[best_model_index]]
p <- (best_model_index - 1) %% 7 + 1
q <- floor((best_model_index - 1) / 7) + 1
cat("Best model:", "GARCH(", p, ",", q, ")\n", sep="")
summary(garchFit(~garch(1,1), arima.res,trace = F))
# Specify the GARCH model
garch_spy <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(3, 2), include.mean = FALSE),
distribution.model = "std")
# Fit the GARCH model
garch_model <- ugarchfit(spec = garch_spy, data = arima.res)
garch_model
predict(garch_model, n.ahead = 100, plot=TRUE)
# Forecast the next 100 time steps
n.ahead <- 100
forecast <- ugarchforecast(garch_model, n.ahead = n.ahead)
# Extract the predicted conditional mean and standard deviation
predicted_mean <- fitted(forecast)
predicted_sigma <- sigma(forecast)
# Plot the original data
plot(arima.res, type = "l", ylim = range(arima.res, predicted_mean + 2 * predicted_sigma, predicted_mean - 2 * predicted_sigma), main = "ARIMA Residuals and GARCH Forecast")
# Add the predicted conditional mean and standard deviation
lines(c(rep(NA, length(arima.res)), predicted_mean), col = "blue", lwd = 2)
lines(c(rep(NA, length(arima.res)), predicted_mean + 2 * predicted_sigma), col = "red", lwd = 2, lty = 2)
lines(c(rep(NA, length(arima.res)), predicted_mean - 2 * predicted_sigma), col = "red", lwd = 2, lty = 2)
# Add a legend
legend("topleft", legend = c("ARIMA Residuals", "Predicted Mean", "Predicted +/- 2*SD"),
col = c("black", "blue", "red"), lty = c(1, 1, 2), lwd = c(1, 2, 2), bty = "n")
hhat <- (garch_model@fit$sigma^2)
plot.ts(hhat)
install.packages("fGarch")
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
library(rugarch)
library(vars)
library(fGarch)
summary(final.fit <- garchFit(~garch(1,1), arima.res, trace = F))
predict(final.fit, n.ahead = 100, plot = TRUE)
# Fit the GARCH model
final.fit <- garchFit(~garch(1, 1), arima.res, trace = F)
# Get the summary object
fit_summary <- summary(final.fit)
# Extract the Information Criterion Statistics
info_criteria <- fit_summary@info.criteria
fit_summary = summary(final.fit <- garchFit(~garch(1,1), arima.res, trace = F))
predict(final.fit, n.ahead = 100, plot = TRUE)
ht <- final.fit@h.t #a numeric vector with the conditional variances (h.t = sigma.t^delta)
data= data.frame(ht,spy$date)
ggplot(data, aes(y = ht, x = bitc_ALL.date)) + geom_line(col = '#ff9933') + ylab('Conditional Variance') + xlab('Date')+ggtitle("Volatality plot")
View(data)
ht <- final.fit@h.t #a numeric vector with the conditional variances (h.t = sigma.t^delta)
data= data.frame(ht,spy$date)
ggplot(data, aes(y = ht, x = spy.date)) + geom_line(col = '#ff9933') + ylab('Conditional Variance') + xlab('Date')+ggtitle("Volatality plot")
# Prepare the data
data <- data.frame(ht = ht, Date = spy_breadth$Date, Breadth = spy_breadth$Breadth)
# Prepare the data
# Prepare the data
data <- data.frame(ht = ht, Date = spy_breadth$Date[-1], Breadth = spy_breadth$Breadth[-1])
# Create the ggplot2 plot
p <- ggplot() +
geom_line(data = data, aes(x = Date, y = ht, color = "Conditional Variance")) +
geom_line(data = data, aes(x = Date, y = Breadth, color = "Market Breadth")) +
scale_y_continuous(sec.axis = sec_axis(~ ., name = "Market Breadth")) +
labs(title = "Conditional Variance and Market Breadth vs Time",
x = "Date",
y = "Conditional Variance",
color = "Legend") +
theme_minimal()
# Display the plot
p
str(ht)
# Prepare the data
data <- data.frame(ht = ht, Date = spy_breadth$Date[-1], Breadth = spy_breadth$Breadth[-1])
# Normalize the ht and Breadth series
data$ht_normalized <- (data$ht - min(data$ht)) / (max(data$ht) - min(data$ht))
data$Breadth_normalized <- (data$Breadth - min(data$Breadth)) / (max(data$Breadth) - min(data$Breadth))
# Create the ggplot2 plot
p <- ggplot() +
geom_line(data = data, aes(x = Date, y = ht, color = "Conditional Variance")) +
geom_line(data = data, aes(x = Date, y = Breadth, color = "Market Breadth")) +
scale_y_continuous(sec.axis = sec_axis(~ ., name = "Market Breadth")) +
labs(title = "Conditional Variance and Market Breadth vs Time",
x = "Date",
y = "Conditional Variance",
color = "Legend") +
theme_minimal()
# Display the plot
p
# Prepare the data
data <- data.frame(ht = ht, Date = spy_breadth$Date[-1], Breadth = spy_breadth$Breadth[-1])
# Normalize the ht and Breadth series
data$ht_normalized <- (data$ht - min(data$ht)) / (max(data$ht) - min(data$ht))
data$Breadth_normalized <- (data$Breadth - min(data$Breadth)) / (max(data$Breadth) - min(data$Breadth))
# Create the ggplot2 plot
p <- ggplot() +
geom_line(data = data, aes(x = Date, y = ht_normalized, color = "Conditional Variance")) +
geom_line(data = data, aes(x = Date, y = Breadth_normalized, color = "Market Breadth")) +
labs(title = "Normalized Conditional Variance and Market Breadth vs Time",
x = "Date",
y = "Normalized Value",
color = "Legend") +
theme_minimal()
# Display the plot
p
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance", line = list(color = "blue")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "red")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth vs Time",
xaxis = list(
title = "Date",
rangeslider = list(visible = T),
rangeselector = list(
buttons = list(
list(count = 1, label = "1m", step = "month", stepmode = "backward"),
list(count = 3, label = "3m", step = "month", stepmode = "backward"),
list(count = 6, label = "6m", step = "month", stepmode = "backward"),
list(count = 1, label = "1y", step = "year", stepmode = "backward"),
list(count = 2, label = "2y", step = "year", stepmode = "backward"),
list(step = "all", label = "All")
)
)
),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance", line = list(color = "blue")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "red")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth vs Time",
xaxis = list(
title = "Date",
rangeslider = list(visible = T),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance", line = list(color = "blue")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "red")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth vs Time",
xaxis = list(
title = "Date",
rangeslider = list(visible = T),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance", line = list(color = "blue")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "red")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth vs Time",
xaxis = list(
title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance", line = list(color = "#d64a27")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "#fcba03")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth vs Time",
xaxis = list(
title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance", line = list(color = "#d64a27")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "#fcba03")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth vs Time",
xaxis = list(
title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance (Volatality)", line = list(color = "#d64a27")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "#fcba03")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth",
xaxis = list(
title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
ht <- final.fit@h.t #a numeric vector with the conditional variances (h.t = sigma.t^delta)
# Prepare the data
data <- data.frame(ht = ht, Date = spy_breadth$Date[-1], Breadth = spy_breadth$Breadth[-1])
# Normalize the ht and Breadth series
data$ht_normalized <- (data$ht - min(data$ht)) / (max(data$ht) - min(data$ht))
data$Breadth_normalized <- (data$Breadth - min(data$Breadth)) / (max(data$Breadth) - min(data$Breadth))
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance (Volatality)", line = list(color = "#d64a27")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "#fcba03")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth",
xaxis = list(
title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
predict(final.fit, n.ahead = 100, plot = TRUE)
garch_predict= predict(final.fit, n.ahead = 100, plot = TRUE)
invisible(plot(garch_predict))
garch_predict= predict(final.fit, n.ahead = 100, plot = TRUE)
ht <- final.fit@h.t #a numeric vector with the conditional variances (h.t = sigma.t^delta)
# Prepare the data
data <- data.frame(ht = ht, Date = spy_breadth$Date[-1], Breadth = spy_breadth$Breadth[-1])
# Normalize the ht and Breadth series
data$ht_normalized <- (data$ht - min(data$ht)) / (max(data$ht) - min(data$ht))
data$Breadth_normalized <- (data$Breadth - min(data$Breadth)) / (max(data$Breadth) - min(data$Breadth))
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance (Volatality)", line = list(color = "#d64a27")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "#fcba03")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth",
xaxis = list(
title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
library(rugarch)
library(vars)
library(fGarch)
spy <- getSymbols("SPY",auto.assign = FALSE, from = "2020-04-07", to = "2023-04-06",src="yahoo")
spy=data.frame(spy)
spy <- data.frame(spy,rownames(spy))
colnames(spy)[7] = "date"
spy$date<-as.Date(spy$date,"%Y-%m-%d")
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
spy_breadth <- spx_breadth_data %>%
dplyr::full_join(spy, by = c("Date" = "date"))
# Create the plot
fig <- plot_ly() %>%
add_trace(
data = spy_breadth,
x = ~Date,
y = ~SPY.Adjusted,
type = "scatter",
mode = "lines",
name = "SPY Adjusted",
line = list(color = "#1a99c7"),
yaxis = "y1"
) %>%
add_trace(
data = spy_breadth,
x = ~Date,
y = ~Breadth,
type = "scatter",
mode = "lines",
name = "Breadth",
line = list(color = "#fcba03"),
yaxis = "y2"
) %>%
layout(
title = "SPY and Breadth",
yaxis = list(
title = "SPY Adjusted",
side = "left",
showgrid = FALSE
),
yaxis2 = list(
title = "Breadth",
side = "right",
overlaying = "y",
showgrid = FALSE
),
xaxis = list(
title = "Date"
)
)
# Display the plot
fig
spy_ts = ts(spy_breadth$`SPY.Adjusted`, start=decimal_date(as.Date("2020-04-06")), frequency = 365.25)
####### calculating Returns
returns = log(spy_ts) %>% diff()
autoplot(returns) +ggtitle("SPY Returns Since 2020-04-06")
require(gridExtra)
p1 = ggAcf(returns,40)+ggtitle("ACF of the SPY return")
p2 = ggPacf(returns,40)+ggtitle("PACF of the SPY return")
grid.arrange(p1,p2, nrow=2)
p3 = ggAcf(abs(returns),40)
p4 = ggAcf(returns^2,40)
grid.arrange(p3,p4, nrow=2)
library(FinTS)
ArchTest(returns, lags=1, demean=TRUE)
aapl<-ts(log(spy$SPY.Adjusted))
auto.arima(aapl)
spy_returns = log(spy_ts)
auto.arima(spy_returns)
arima.fit<-Arima(spy_returns,order=c(3,2,0))
arima.res<-arima.fit$residuals
arima.res <- na.omit(arima.res)
acf(arima.res^2)
pacf(arima.res^2)
model <- list() ## set counter
cc <- 1
for (p in 1:7) {
for (q in 1:7) {
model[[cc]] <- garch(arima.res, order=c(p, q), trace=F)
cc <- cc + 1
}
}
## get AIC values for model evaluation
GARCH_AIC <- sapply(model, AIC) ## model with lowest AIC is the best
best_model_index <- which(GARCH_AIC == min(GARCH_AIC))
best_model <- model[[best_model_index]]
p <- (best_model_index - 1) %% 7 + 1
q <- floor((best_model_index - 1) / 7) + 1
cat("Best model:", "GARCH(", p, ",", q, ")\n", sep="")
# Specify the GARCH model
garch_spy <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(3, 2), include.mean = FALSE),
distribution.model = "std")
# Fit the GARCH model
garch_model <- ugarchfit(spec = garch_spy, data = arima.res)
summary(final.fit <- garchFit(~garch(1,1), arima.res, trace = F))
garch_predict= predict(final.fit, n.ahead = 100, plot = TRUE)
ht <- final.fit@h.t #a numeric vector with the conditional variances (h.t = sigma.t^delta)
# Prepare the data
data <- data.frame(ht = ht, Date = spy_breadth$Date[-1], Breadth = spy_breadth$Breadth[-1])
# Normalize the ht and Breadth series
data$ht_normalized <- (data$ht - min(data$ht)) / (max(data$ht) - min(data$ht))
data$Breadth_normalized <- (data$Breadth - min(data$Breadth)) / (max(data$Breadth) - min(data$Breadth))
# Create the plotly plot
fig <- plot_ly() %>%
add_lines(data = data, x = ~Date, y = ~ht_normalized, name = "Conditional Variance (Volatality)", line = list(color = "#d64a27")) %>%
add_lines(data = data, x = ~Date, y = ~Breadth_normalized, name = "Market Breadth", line = list(color = "#fcba03")) %>%
layout(
title = "Normalized Conditional Variance and Market Breadth",
xaxis = list(
title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Normalized Value")
)
# Display the plot
fig
