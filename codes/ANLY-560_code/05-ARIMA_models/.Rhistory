library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
spx_breadth_ts <- ts(spx_breadth_data$Breadth, start =decimal_date(as.Date("2020-04-07", format="%Y-%m-%d")), frequency = 365.25)
require(gridExtra)
plot5 = ggAcf(spx_breadth_ts)+ggtitle("ACF of the Market Breadth")
plot6 = ggPacf(spx_breadth_ts)+ggtitle("PACF of the Market Breadth")
grid.arrange(plot5, plot6,nrow=2)
# Perform ADF test
adf_test <- adf.test(spx_breadth_ts)
# Print the results
print(adf_test)
# Initialize the ARIMA results list
ARMA_res <- list()
# Set a counter
cc <- 1
# Loop over AR (p) values
for (p in 1:3) {
# Loop over MA (q) values
for (q in 0:1) {
# Fit the ARIMA model
ARMA_res[[cc]] <- arima(x = spx_breadth_ts, order = c(p, 0, q))
# Increment the counter
cc <- cc + 1
}
}
# Get AIC and BIC values for model evaluation
ARMA_AIC <- sapply(ARMA_res, function(x) x$aic)
ARMA_BIC <- sapply(ARMA_res, function(x) x$bic)
# Find the index of the minimum AIC value
best_model <- ARMA_res[[which(ARMA_AIC == min(ARMA_AIC))]]
# Print the best model
print(best_model)
# Fit the ARIMA(3, 0, 1) model
best_model <- Arima(spx_breadth_ts, order = c(3, 0, 1))
# Residual diagnostics
checkresiduals(best_model)
# Additional residual plots
par(mfrow = c(2, 2))
# Histogram of residuals
hist(best_model$residuals, breaks = 20, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")
# Kernel density plot of residuals
plot(density(best_model$residuals), main = "Kernel Density Plot of Residuals", xlab = "Residuals", ylab = "Density", col = "blue")
rug(best_model$residuals, col = "black")
# Q-Q plot of residuals
qqnorm(best_model$residuals, main = "Q-Q Plot of Residuals", col = "blue")
qqline(best_model$residuals, col = "red", lwd = 2)
# Scatter plot of residuals vs. fitted values
plot(fitted(best_model), best_model$residuals, main = "Residuals vs. Fitted Values", xlab = "Fitted Values", ylab = "Residuals", col = "blue", pch = 20)
abline(h = 0, col = "red", lwd = 2)
par(mfrow = c(1, 1))
auto.arima(spx_breadth_ts)
forecast(best_model,10)
autoplot(forecast(best_model))
accuracy(best_model)
bench_fit <- snaive(spx_breadth_ts, h=24)
accuracy(bench_fit)
autoplot(spx_breadth_ts) +
autolayer(meanf(spx_breadth_ts, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(spx_breadth_ts, h=11),
series="Naïve", PI=FALSE) +
autolayer(forecast(best_model, h=11),
series="FInal ARIMA model", PI=FALSE) +
ggtitle("Forecasts for SPX market breadth") +
xlab("Year") + ylab("Market Breadth") +
guides(colour=guide_legend(title="Forecast"))
autoplot(decompose(spx_breadth_ts))
spx_breadth_ts %>% diff() %>% ggtsdisplay()
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*12),nrow=12) # roughly nrow = 3x2x2
for (p in 2:4)# p=1,2,3 : 3
{
for(q in 2:3)# q=1,3,4 :2
{
for(d in 1:2)# d=1,2 :2
{
if(p-1+d+q-1<=8)
{
model<- Arima(spx_breadth_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(temp)
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*12),nrow=12) # roughly nrow = 3x2x2
for (p in 2:4)# p=1,2,3 : 3
{
for(q in 2:3)# q=1,3,4 :2
{
for(d in 1:2)# d=1,2 :2
{
if(p-1+d+q-1<=8)
{
model<- Arima(spx_breadth_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
#temp
knitr::kable(temp)
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
fit1=Arima(temp.ts,order=c(3,1,1),include.drift = TRUE)
fit1=Arima(spx_breadth_ts,order=c(3,1,1),include.drift = TRUE)
fit2=Arima(spx_breadth_ts,order=c(1,1,0),include.drift = TRUE)
plot(temp.ts, col="lightblue")
plot(spx_breadth_ts, col="lightblue")
lines(fitted(fit1),col="darkgreen")
lines(fitted(fit2),col="red")
legend(x = "topleft", legend = c("spx_market_breadth", "fit1","fit2"), fill = 3:1)
summary(fit1)
forecast(fit1,10)
autoplot(forecast(fit1))
train_series <- window(temp.ts, end = 2022.481724846)
train_series <- window(spx_breadth_ts, end = 2022.481724846)
test_series <- window(spx_breadth_ts, start = 2022.481724846)
train_series <- window(spx_breadth_ts, end = 2022.481724846)
test_series <- window(spx_breadth_ts, start = 2022.481724846)
train_series <- window(spx_breadth_ts, end = 2022.4)
test_series <- window(spx_breadth_ts, start = 2022.4)
train_series <- window(spx_breadth_ts, end = 2022.4)
test_series <- window(spx_breadth_ts, start = 2022.46)
train_series <- window(spx_breadth_ts, end = 2022.4)
train_series %>% diff() %>% ggtsdisplay()
sarimaModel_1=arima(train_series, order=c(3,1,1))
sarimaModel_2=arima(train_series, order=c(1,1,0))
forecast1=predict(arimaModel_1, 20)
train_series <- window(spx_breadth_ts, end = 2022.4)
train_series %>% diff() %>% ggtsdisplay()
sarimaModel_1=arima(train_series, order=c(3,1,1))
sarimaModel_2=arima(train_series, order=c(1,1,0))
forecast1=predict(sarimaModel_1, 20)
forecast2=predict(sarimaModel_2, 20)
train_series <- window(spx_breadth_ts, end = 2022.4)
train_series %>% diff() %>% ggtsdisplay()
sarimaModel_1=arima(train_series, order=c(3,1,1))
sarimaModel_2=arima(train_series, order=c(1,1,0))
forecast1=predict(sarimaModel_1, 20)
forecast2=predict(sarimaModel_2, 20)
f1<-meanf(train_series, h=11) #mean
checkresiduals(f1)
f2<-naive(train_series, h=11) # naive method
checkresiduals(f2)
autoplot(train_series) +
autolayer(meanf(train_series, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(train_series, h=11),
series="Naïve", PI=FALSE) +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
plot(spx_breadth_ts, col="lightblue")
lines(fitted(fit1),col="darkgreen")
lines((forecast1$pred),col='red', lwd=2)
legend(x = "topleft", legend = c("spx breadth", "fit1","fit2"), fill = 3:1)
# Select Date, Breadth, XLF, XLK, ^VIX, SPY columns
spx_selected <- spx_full %>%
dplyr::select(Date, Breadth, XLF, XLK, `^VIX`, SPY)
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
library(vars)
# Read the market breadth data
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
# Define the sector symbols and the VIX index
symbols <- c("XLB", "XLC", "XLE", "XLF", "XLI", "XLK", "XLP", "XLRE", "XLU", "XLV", "XLY", "^VIX","SPY")
# Initialize an empty data frame for the price data
price_data <- data.frame()
# Loop through the symbols
for (symbol in symbols) {
# Get the adjusted price data
tmp <- tq_get(symbol, from = "2020-04-07", to = Sys.Date(), get = "stock.prices", source = "yahoo") %>%
dplyr::select(date, adjusted) %>%
dplyr::rename(!!symbol := adjusted)
# Merge the data into the price_data data frame
if (nrow(price_data) == 0) {
price_data <- tmp
} else {
price_data <- price_data %>%
dplyr::full_join(tmp, by = "date")
}
}
# Merge the price data with the market breadth data
spx_full <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
tail(spx_full)
# Select Date, Breadth, XLF, XLK, ^VIX, SPY columns
spx_selected <- spx_full %>%
dplyr::select(Date, Breadth, XLF, XLK, `^VIX`, SPY)
# Remove rows with missing values
spx_selected <- spx_selected %>%
na.omit()
tail(spx_selected)
spx_ts = ts(spx_selected, start = decimal_date(as.Date("2020-04-07", format = "%Y-%m-%d")),frequency = 365.25)
autoplot(spx_ts[,c(2:6)], facets= TRUE)+
xlab("Date")+ylab("") +
ggtitle("Market Breadth, XLK, XLF, VIX and SPY since 2020-04-07")
VARselect(spx_selected[,c(2:6)], lag.max = 10, type = "both")
