---
title: "ARMA/ARIMA/SARIMA MODEL"
format:
  html:
    code-fold: true
    theme: custom.scss
    toc: true
    toc_float:
      collapsed: false
      smooth_scroll: true
      df_print: paged
---

```{r,echo=FALSE,message=FALSE, warning=FALSE}
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
```

During the Exploratory Data Analysis session, through ACF and Augmented Dickey-Fuller Test we are able to find that the market breadth data is stationary, thus no need for differencing and log transformed at first time. 

## ARIMA Models

```{r,warning=FALSE,message=FALSE}
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
  mutate(Date = ymd(Date)) %>%
  rename(Breadth = `0`)

spx_breadth_ts <- ts(spx_breadth_data$Breadth, start =decimal_date(as.Date("2020-04-07", format="%Y-%m-%d")), frequency = 365.25)
```

### Check for stationarity

```{r,message=FALSE,warning=FALSE}
require(gridExtra)

plot5 = ggAcf(spx_breadth_ts)+ggtitle("ACF of the Market Breadth")
plot6 = ggPacf(spx_breadth_ts)+ggtitle("PACF of the Market Breadth")
grid.arrange(plot5, plot6,nrow=2)

# Perform ADF test
adf_test <- adf.test(spx_breadth_ts)

# Print the results
print(adf_test)

```
Again, both the ACF plot and the Augmented Dickey-Fuller test shows that the market breadth data is stationary, thus no further differencing needed. Since we didn't differenced the data, we will be using ARMA model, and from the plot we could clearly see that p=1 and q=0, observed from the AR and MA model 

### Model FItting (ARMA)
```{r}
# Initialize the ARIMA results list
ARMA_res <- list()

# Set a counter
cc <- 1

# Loop over AR (p) values
for (p in 1:3) {
  # Loop over MA (q) values
  for (q in 0:1) {
      # Fit the ARIMA model
      ARMA_res[[cc]] <- arima(x = spx_breadth_ts, order = c(p, 0, q))
      
      # Increment the counter
      cc <- cc + 1
  }
}

# Get AIC and BIC values for model evaluation
ARMA_AIC <- sapply(ARMA_res, function(x) x$aic)
ARMA_BIC <- sapply(ARMA_res, function(x) x$bic)

# Find the index of the minimum AIC value
best_model <- ARMA_res[[which(ARMA_AIC == min(ARMA_AIC))]]

# Print the best model
print(best_model)
```
Breadth(t) = 600.5391 + 1.8353 * Breadth(t-1) - 0.7963 * Breadth(t-2) - 0.0497 * Breadth(t-3) - 0.9447 * ε(t-1) + ε(t)

### Model Diagonsis

```{r}
# Fit the ARIMA(3, 0, 1) model
best_model <- Arima(spx_breadth_ts, order = c(3, 0, 1))

# Residual diagnostics
checkresiduals(best_model)

# Additional residual plots
par(mfrow = c(2, 2))

# Histogram of residuals
hist(best_model$residuals, breaks = 20, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")

# Kernel density plot of residuals
plot(density(best_model$residuals), main = "Kernel Density Plot of Residuals", xlab = "Residuals", ylab = "Density", col = "blue")
rug(best_model$residuals, col = "black")

# Q-Q plot of residuals
qqnorm(best_model$residuals, main = "Q-Q Plot of Residuals", col = "blue")
qqline(best_model$residuals, col = "red", lwd = 2)

# Scatter plot of residuals vs. fitted values
plot(fitted(best_model), best_model$residuals, main = "Residuals vs. Fitted Values", xlab = "Fitted Values", ylab = "Residuals", col = "blue", pch = 20)
abline(h = 0, col = "red", lwd = 2)

par(mfrow = c(1, 1))
```
By checking the residual of the model ARIMA(3,0,1) we can see that the model did a good job of capturing the residual and the movement of the dataset as the distribution of the residual is normally distributed and most of the residuals follows the q-q plot. 

### Compare with Auto.ARima()
```{r}
auto.arima(spx_breadth_ts)
```
The result of the auto arima is different from the model I choose, which I believe there could be several cause of this:

- Different criteria: While I used the AIC value to select the best ARIMA model in your manual search, auto.arima also considers AICc (corrected AIC) and BIC (Bayesian Information Criterion) values in its model selection process. These criteria may lead to different model selections.

- Stepwise procedure: The auto.arima function uses a stepwise search algorithm to find the best model, which starts with a simple model and adds or removes terms based on the AIC value. This stepwise approach is computationally efficient, but it may not explore all possible combinations of p, d, and q, and thus might not find the same model as my manual search.


### ARIMA model forecast
```{r}
forecast(best_model,10)
```


```{r}
autoplot(forecast(best_model))
```
We can see the model was able to provide a good forecast for months but not good enough for later changes.

### Compare with benchmark

```{r, warning=FALSE}
accuracy(best_model)

bench_fit <- snaive(spx_breadth_ts, h=24) 
accuracy(bench_fit)
```
By comparing the RMSE, my manual model clearly outperform the benchmark naive model.

```{r}
autoplot(spx_breadth_ts) +
  autolayer(meanf(spx_breadth_ts, h=11),
            series="Mean", PI=FALSE) +
  autolayer(naive(spx_breadth_ts, h=11),
            series="Naïve", PI=FALSE) +
    autolayer(forecast(best_model, h=11),
            series="FInal ARIMA model", PI=FALSE) +
  ggtitle("Forecasts for SPX market breadth") +
  xlab("Year") + ylab("Market Breadth") +
  guides(colour=guide_legend(title="Forecast"))
```
By visualizting the forecast, it is also clear that the model has outperform the benchmark models. 

## SARIMA

```{r}
autoplot(decompose(spx_breadth_ts))
```
By decomposing the market breadth time series, I can't observed significant seasonal effect with in the data, which is normal for the stock market breadth that measure the direction of market movement rather than the overall movements.

