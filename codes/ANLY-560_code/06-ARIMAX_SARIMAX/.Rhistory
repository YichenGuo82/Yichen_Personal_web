library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
# Read the market breadth data
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
# Define the sector symbols and the VIX index
symbols <- c("XLB", "XLC", "XLE", "XLF", "XLI", "XLK", "XLP", "XLRE", "XLU", "XLV", "XLY", "^VIX")
# Initialize an empty data frame for the price data
price_data <- data.frame()
# Loop through the symbols
for (symbol in symbols) {
# Get the adjusted price data
tmp <- tq_get(symbol, from = "2020-04-07", to = Sys.Date(), get = "stock.prices", source = "yahoo") %>%
dplyr::select(date, adjusted) %>%
dplyr::rename(!!symbol := adjusted)
# Merge the data into the price_data data frame
if (nrow(price_data) == 0) {
price_data <- tmp
} else {
price_data <- price_data %>%
dplyr::full_join(tmp, by = "date")
}
}
# Merge the price data with the market breadth data
final_data <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
print(final_data)
View(final_data)
# Merge the price data with the market breadth data
spx_full <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
head(spx_full)
# Read the market breadth data
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
# Define the sector symbols and the VIX index
symbols <- c("XLB", "XLC", "XLE", "XLF", "XLI", "XLK", "XLP", "XLRE", "XLU", "XLV", "XLY", "^VIX","SPY")
# Initialize an empty data frame for the price data
price_data <- data.frame()
# Loop through the symbols
for (symbol in symbols) {
# Get the adjusted price data
tmp <- tq_get(symbol, from = "2020-04-07", to = Sys.Date(), get = "stock.prices", source = "yahoo") %>%
dplyr::select(date, adjusted) %>%
dplyr::rename(!!symbol := adjusted)
# Merge the data into the price_data data frame
if (nrow(price_data) == 0) {
price_data <- tmp
} else {
price_data <- price_data %>%
dplyr::full_join(tmp, by = "date")
}
}
# Merge the price data with the market breadth data
spx_full <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
head(spx_full)
# Merge the price data with the market breadth data
spx_full <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
knitr::kable(head(spx_full))
# Merge the price data with the market breadth data
spx_full <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
head(spx_full)
View(spx_full)
# Select Date, Breadth, XLF, XLK, and ^VIX columns
selected_data <- final_data %>%
dplyr::select(Date, Breadth, XLF, XLK, `^VIX`, SPY)
# Select Date, Breadth, XLF, XLK, and ^VIX columns
selected_data <- spx_full %>%
dplyr::select(Date, Breadth, XLF, XLK, `^VIX`, SPY)
# Display the selected data
print(selected_data)
# Merge the price data with the market breadth data
spx_full <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
tail(spx_full)
install.packages("Vars")
install.packages("vars")
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
library(vars)
# Select Date, Breadth, XLF, XLK, and ^VIX columns
spx_selected <- spx_full %>%
dplyr::select(Date, Breadth, XLF, XLK, `^VIX`, SPY)
# Select Date, Breadth, XLF, XLK, and ^VIX columns
spx_selected <- spx_full %>%
dplyr::select(Date, Breadth, XLF, XLK, `^VIX`, SPY)
tail(spx_selected)
VARselect(spx_selected[,c(2:6)], lag.max = 10, type = "both")
summary(VAR(spx_selected[,c(2:6)], p=1, type = 'both'))
best_model = VAR(spx_selected[,c(2:6)], p=1, type = 'both')
summary(best_model)
# Forecast using the model
n_periods <- 10 # Specify the number of periods for the forecast
forecast <- predict(best_model, n.ahead = n_periods)
# Display the forecast results
print(forecast)
# Access the forecasted values
forecasted_values <- forecast$fcst
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
# Create a new data frame with the original data and the forecasts
original_data_end <- tail(selected_data, n = 1)$Date
forecast_dates <- seq(from = original_data_end + 1, by = 1, length.out = n_periods)
forecast_df <- data.frame(Date = forecast_dates, forecast_df)
# Combine original data and forecasts
combined_data <- rbind(selected_data, forecast_df)
View(forecast_df)
View(forecast)
colnames(forecast_df)
# Forecast using the model
n_periods <- 10 # Specify the number of periods for the forecast
forecast <- predict(best_model, n.ahead = n_periods)
# Display the forecast results
print(forecast$fcst)
# Access the forecasted values
forecasted_values <- forecast$fcst
View(forecasted_values)
# Forecast using the model
n_periods <- 10 # Specify the number of periods for the forecast
forecast <- predict(best_model, n.ahead = n_periods)
# Display the forecast results
print(forecast$fcst)
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
# Select only the forecast columns
forecast_df <- forecast_df %>%
dplyr::select(Date, Breadth = Breadth.fcst, XLF = XLF.fcst, XLK = XLK.fcst, `^VIX` = X.VIX.fcst, SPY = SPY.fcst)
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
View(forecast_df)
# Forecast using the model
n_periods <- 10 # Specify the number of periods for the forecast
forecast <- predict(best_model, n.ahead = n_periods)
# Display the forecast results
print(forecast$fcst)
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
colnames(forecast_df)
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
# Create a new data frame with the original data and the forecasts
original_data_end <- tail(selected_data, n = 1)$Date
forecast_dates <- seq(from = original_data_end + 1, by = 1, length.out = n_periods)
forecast_df <- data.frame(Date = forecast_dates, forecast_df)
# Select only the forecast columns
forecast_df <- forecast_df %>%
dplyr::select(Date, Breadth = Breadth.fcst, XLF = XLF.fcst, XLK = XLK.fcst, `^VIX` = X.VIX.fcst, SPY = SPY.fcst)
# Combine original data and forecasts
combined_data <- rbind(selected_data, forecast_df)
# Plot the original data and the forecasts
ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Breadth, color = "Breadth")) +
geom_line(aes(y = XLF, color = "XLF")) +
geom_line(aes(y = XLK, color = "XLK")) +
geom_line(aes(y = `^VIX`, color = "^VIX")) +
scale_color_manual(values = c("Breadth" = "blue", "XLF" = "red", "XLK" = "green", "^VIX" = "purple")) +
labs(title = "Original Data and Forecasts",
x = "Date",
y = "Values",
color = "Variables") +
theme_minimal()
View(combined_data)
# Plot the original data and the forecasts
ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Breadth, color = "Breadth")) +
geom_line(aes(y = XLF, color = "XLF")) +
geom_line(aes(y = XLK, color = "XLK")) +
geom_line(aes(y = `^VIX`, color = "^VIX")) +
geom_line(aes(y = SPY, color = "SPY")) +
geom_vline(aes(xintercept = as.numeric(original_data_end)), color = "red", linetype = "dashed") +
scale_color_manual(values = c("Breadth" = "blue", "XLF" = "red", "XLK" = "green", "^VIX" = "purple", "SPY" = "orange")) +
labs(title = "Original Data and Forecasts",
x = "Date",
y = "Values",
color = "Variables") +
theme_minimal()
# Plot the original data and the forecasts
ggplot(combined_data, aes(x = Date)) +
geom_line(aes(y = Breadth, color = "Breadth")) +
geom_line(aes(y = XLF, color = "XLF")) +
geom_line(aes(y = XLK, color = "XLK")) +
geom_line(aes(y = `^VIX`, color = "^VIX")) +
geom_line(aes(y = SPY, color = "SPY")) +
geom_vline(aes(xintercept = as.numeric(original_data_end)), color = "red", linetype = "dashed") +
labs(title = "Original Data and Forecasts",
x = "Date",
y = "Values",
color = "Variables") +
theme_minimal()
# Convert combined_data to a long format
combined_data_long <- combined_data %>%
tidyr::pivot_longer(cols = -Date, names_to = "Variable", values_to = "Value")
# Create an interactive plot with a range slider
p <- plot_ly(data = combined_data_long, x = ~Date, y = ~Value, color = ~Variable, type = "scatter", mode = "lines") %>%
layout(title = "Original Data and Forecasts",
xaxis = list(title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Values"))
# Show the plot
p
# Create an interactive plot with a range slider
p <- plot_ly(data = combined_data_long, x = ~Date, y = ~Value, color = ~Variable, type = "scatter", mode = "lines") %>%
layout(title = "Original Data and Forecasts",
xaxis = list(title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Values"),
shapes = list(list(type = "line",
x0 = original_data_end,
x1 = original_data_end,
y0 = min(combined_data_long$Value),
y1 = max(combined_data_long$Value),
yref = "y",
xref = "x",
line = list(color = "red", dash = "dash"))))
# Show the plot
p
# Convert combined_data to a long format
combined_data_long <- combined_data %>%
tidyr::pivot_longer(cols = -Date, names_to = "Variable", values_to = "Value")
# Create an interactive plot with a range slider
p <- plot_ly(data = combined_data_long, x = ~Date, y = ~Value, color = ~Variable, type = "scatter", mode = "lines") %>%
layout(title = "Original Data and Forecasts",
xaxis = list(title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Values"),
shapes = list(list(type = "line",
x0 = original_data_end,
x1 = original_data_end,
y0 = min(combined_data_long$Value),
y1 = max(combined_data_long$Value),
yref = "y",
xref = "x",
line = list(color = "red", dash = "dash"))),
annotations = list(list(x = original_data_end,
y = max(combined_data_long$Value),
xref = "x",
yref = "y",
text = "Forecast",
showarrow = F,
ax = 0,
ay = -15,
font = list(size = 12, color = "red"))))
# Show the plot
p
# Forecast using the model
n_periods <- 30 # Specify the number of periods for the forecast
forecast <- predict(best_model, n.ahead = n_periods)
# Display the forecast results
# print(forecast$fcst)
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
# Create a new data frame with the original data and the forecasts
original_data_end <- tail(selected_data, n = 1)$Date
forecast_dates <- seq(from = original_data_end + 1, by = 1, length.out = n_periods)
forecast_df <- data.frame(Date = forecast_dates, forecast_df)
# Select only the forecast columns
forecast_df <- forecast_df %>%
dplyr::select(Date, Breadth = Breadth.fcst, XLF = XLF.fcst, XLK = XLK.fcst, `^VIX` = X.VIX.fcst, SPY = SPY.fcst)
# Combine original data and forecasts
combined_data <- rbind(selected_data, forecast_df)
# Convert combined_data to a long format
combined_data_long <- combined_data %>%
tidyr::pivot_longer(cols = -Date, names_to = "Variable", values_to = "Value")
# Create an interactive plot with a range slider
p <- plot_ly(data = combined_data_long, x = ~Date, y = ~Value, color = ~Variable, type = "scatter", mode = "lines") %>%
layout(title = "Original Data and Forecasts",
xaxis = list(title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Values"),
shapes = list(list(type = "line",
x0 = original_data_end,
x1 = original_data_end,
y0 = min(combined_data_long$Value),
y1 = max(combined_data_long$Value),
yref = "y",
xref = "x",
line = list(color = "red", dash = "dash"))),
annotations = list(list(x = original_data_end,
y = max(combined_data_long$Value),
xref = "x",
yref = "y",
text = "Forecast",
showarrow = F,
ax = 0,
ay = -15,
font = list(size = 12, color = "red"))))
# Show the plot
p
spx_ts = ts(spx_selected, start = decimal_date(as.Date("2020-04-07", format = "%Y-%m-%d")),frequency = 365.25)
autoplot(spx_ts[,c(2:6)], facets= TRUE)+
xlab("Date")+ylab("") +
ggtitle("Market Breadth, XLK, XLF, VIX and SPY since 2020-04-07")
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
library(vars)
# Read the market breadth data
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
# Define the sector symbols and the VIX index
symbols <- c("XLB", "XLC", "XLE", "XLF", "XLI", "XLK", "XLP", "XLRE", "XLU", "XLV", "XLY", "^VIX","SPY")
# Initialize an empty data frame for the price data
price_data <- data.frame()
# Loop through the symbols
for (symbol in symbols) {
# Get the adjusted price data
tmp <- tq_get(symbol, from = "2020-04-07", to = Sys.Date(), get = "stock.prices", source = "yahoo") %>%
dplyr::select(date, adjusted) %>%
dplyr::rename(!!symbol := adjusted)
# Merge the data into the price_data data frame
if (nrow(price_data) == 0) {
price_data <- tmp
} else {
price_data <- price_data %>%
dplyr::full_join(tmp, by = "date")
}
}
# Merge the price data with the market breadth data
spx_full <- spx_breadth_data %>%
dplyr::full_join(price_data, by = c("Date" = "date"))
# Display the final data
tail(spx_full)
# Select Date, Breadth, XLF, XLK, ^VIX, SPY columns
spx_selected <- spx_full %>%
dplyr::select(Date, Breadth, XLF, XLK, `^VIX`, SPY)
tail(spx_selected)
spx_ts = ts(spx_selected, start = decimal_date(as.Date("2020-04-07", format = "%Y-%m-%d")),frequency = 365.25)
autoplot(spx_ts[,c(2:6)], facets= TRUE)+
xlab("Date")+ylab("") +
ggtitle("Market Breadth, XLK, XLF, VIX and SPY since 2020-04-07")
VARselect(spx_selected[,c(2:6)], lag.max = 10, type = "both")
best_model = VAR(spx_selected[,c(2:6)], p=1, type = 'both')
summary(best_model)
# Forecast using the model
n_periods <- 30 # Specify the number of periods for the forecast
forecast <- predict(best_model, n.ahead = n_periods)
# Display the forecast results
# print(forecast$fcst)
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
# Create a new data frame with the original data and the forecasts
original_data_end <- tail(spx_selected, n = 1)$Date
forecast_dates <- seq(from = original_data_end + 1, by = 1, length.out = n_periods)
forecast_df <- data.frame(Date = forecast_dates, forecast_df)
# Select only the forecast columns
forecast_df <- forecast_df %>%
dplyr::select(Date, Breadth = Breadth.fcst, XLF = XLF.fcst, XLK = XLK.fcst, `^VIX` = X.VIX.fcst, SPY = SPY.fcst)
# Combine original data and forecasts
combined_data <- rbind(selected_data, forecast_df)
# Forecast using the model
n_periods <- 30 # Specify the number of periods for the forecast
forecast <- predict(best_model, n.ahead = n_periods)
# Display the forecast results
# print(forecast$fcst)
# Convert the forecasts to a data frame
forecast_df <- data.frame(forecast$fcst)
# Create a new data frame with the original data and the forecasts
original_data_end <- tail(spx_selected, n = 1)$Date
forecast_dates <- seq(from = original_data_end + 1, by = 1, length.out = n_periods)
forecast_df <- data.frame(Date = forecast_dates, forecast_df)
# Select only the forecast columns
forecast_df <- forecast_df %>%
dplyr::select(Date, Breadth = Breadth.fcst, XLF = XLF.fcst, XLK = XLK.fcst, `^VIX` = X.VIX.fcst, SPY = SPY.fcst)
# Combine original data and forecasts
combined_data <- rbind(spx_selected, forecast_df)
# Convert combined_data to a long format
combined_data_long <- combined_data %>%
tidyr::pivot_longer(cols = -Date, names_to = "Variable", values_to = "Value")
# Create an interactive plot with a range slider
p <- plot_ly(data = combined_data_long, x = ~Date, y = ~Value, color = ~Variable, type = "scatter", mode = "lines") %>%
layout(title = "Original Data and Forecasts",
xaxis = list(title = "Date",
rangeslider = list(visible = T)),
yaxis = list(title = "Values"),
shapes = list(list(type = "line",
x0 = original_data_end,
x1 = original_data_end,
y0 = min(combined_data_long$Value),
y1 = max(combined_data_long$Value),
yref = "y",
xref = "x",
line = list(color = "red", dash = "dash"))),
annotations = list(list(x = original_data_end,
y = max(combined_data_long$Value),
xref = "x",
yref = "y",
text = "Forecast",
showarrow = F,
ax = 0,
ay = -15,
font = list(size = 12, color = "red"))))
# Show the plot
p
