---
title: "Data EDA"
format:
  html:
    code-fold: true
    theme: custom.scss
    toc: true
    toc_float:
      collapsed: false
      smooth_scroll: true
      df_print: paged
---

```{r,echo=FALSE,message=FALSE, warning=FALSE}
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
```

As mentioned in the data gathering section, the market breadth data was developed from the sub sector of SPX. S&P500 stock can be categorized into 11 sectors according to Global Industry Classification Standards (GICS) based on their primary business. Each sectorâ€™s Breadth score ranges from 0 to 100, indicating the percentage of stocks of which the share price is above the 20-day simple moving average (20-day SMA). The maximum Breadth score for S&P500 is 1100 by the summation of all the 11 sectors. This is one of the ways to gauge the SPX stock market sentiment. Empirically, when the total score is greater than 1000, or less than 200, we identify the sentiment entering extreme regimes.

In this page we will do more data exploratory analysis on the dataset we have. 

## Market Breadth Time Series Plot

```{r, warning=FALSE, message=FALSE}

spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
  mutate(Date = ymd(Date)) %>%
  rename(Breadth = `0`)

tail(spx_breadth_data)
```

```{r}
# Create a daily time series
spx_breadth_ts <- ts(spx_breadth_data$Breadth, start =decimal_date(as.Date("2020-04-07", format="%Y-%m-%d")), frequency = 365.25)
plot_ly(x=time(spx_breadth_ts), y=spx_breadth_ts, type = "scatter", mode="lines", name="temp") %>%
  layout(xaxis= list(title = "Date",rangeslider = list(type = "date")),
         yaxis= list(title = "Market Breath"),
         title = "SPX Market Breadth")

```

- Trend: There doesn't appears to have a clear trend as the time goes.
- Seasonality: There seems to be some pattern but not sure about seasonality.
- Variation: There is significant variation in the price of SPY over the period, with some periods of rapid growth and some periods of decline.
- Periodic fluctuations: There are some periodic fluctuations in the data, but they are not clear from this plot. It is possible that a more detailed analysis of the data would reveal periodic fluctuations at different time scales.

In terms of whether the time series is multiplicative or additive, it's difficult to tell definitively from the plot alone. A common approach to determining whether a time series is multiplicative or additive is to decompose it into its components (trend, seasonality, etc.) 

## SPY Time Series Plot

```{r}
spy <- getSymbols("SPY",auto.assign = FALSE, from = "2020-04-07",src="yahoo") 
spy=data.frame(spy)
spy <- data.frame(spy,rownames(spy))

colnames(spy)[7] = "date"

spy$date<-as.Date(spy$date,"%Y-%m-%d")

plot_ly(spy, x = ~date, y = ~SPY.Adjusted, type = "scatter", mode = "lines") %>%
  layout(title = "SPY Adjusted Price Time Series", yaxis = list(title = "SPY Price"))

ts_adjusted <- as.ts(spy[,"SPY.Adjusted"], frequency = 1)
```

- Trend: There appears to be an overall upward trend in the price of SPY over the period from October 2017 to February 2023.
- Seasonality: There does not appear to be a clear seasonal pattern in the data.
- Variation: There is significant variation in the price of SPY over the period, with some periods of rapid growth and some periods of decline.
- Periodic fluctuations: There may be some periodic fluctuations in the data, but they are not clear from this plot. It is possible that a more detailed analysis of the data would reveal periodic fluctuations at different time scales.

In terms of whether the time series is multiplicative or additive, it's difficult to tell definitively from the plot alone. A common approach to determining whether a time series is multiplicative or additive is to decompose it into its components (trend, seasonality, etc.) 

```{r}
smooth_time_series <- function(data) {
  x <- as.numeric(data$Date)
  y <- data$Breadth
  X_ <- seq(min(x), max(x), length.out = 10000)
  Y_ <- pchip(x, y, X_)
  X_ <- as.Date(X_, origin = "1970-01-01")
  # Make sure the first date is 2020-04-07
  X_[1] <- as.Date("2020-04-07")
  return(data.frame(Date = X_, Breadth = Y_))
}

smoothed_data <- smooth_time_series(spx_breadth_data)

p <- plot_ly() %>%
  add_trace(data = smoothed_data, x = ~Date, y = ~Breadth, type = "scatter", mode = "lines", name = "Smoothed Market Breadth") %>%
  add_trace(data = spy, x = ~date, y = ~SPY.Adjusted, type = "scatter", mode = "lines", name = "SPY Adjusted Price", yaxis = "y2") %>%
  layout(title = "Smoothed SPX Market Breadth and SPY Adjusted Price",
         xaxis = list(title = "Date",rangeslider = list(type = "date")),
         yaxis = list(title = "Breadth"),
         yaxis2 = list(title = "SPY Price", overlaying = "y", side = "right"))

p

```
The market breadth was smoothed for better representation. 

However, From this we can clearly see that the market breadth index is continuing oscillating between the range of 0 and 1000, while the overall stock market price follows a steady upward trends. However, further analysis is needed for more analysis on the market breadth index.

### Lag plot
```{r}
ts_lags(spx_breadth_ts, lags=1:6)
```

The lag plot of SPX market breath shown an steady upward trend, suggests the presence of positive autocorrelation in the market breadth price and it's lagged price for mostly three days. It suggests that past values of the time series **can be used to predict** future values, and that simple models that assume the time series is constant over time may not be appropriate.

### Decompose of the SPY time series plot (Not Applicable)

```{r}
# Decompose the time series
try({decomp <- decompose(ts_adjusted)})
```

From the code we have learn that this data set has **no periods**, it means that there is no clear and consistent repeating pattern in the data. Thus the traditional decompose() or stl() don't work on the dataset.

In general, stock prices are considered to be non-periodic because they do not exhibit a clear and consistent repeating pattern over time with a fixed period. The fluctuations in stock prices are influenced by a complex and ever-changing set of factors, such as company performance, economic indicators, geopolitical events, and investor sentiment, among others. These factors can cause stock prices to rise or fall in unpredictable ways that are difficult to forecast.

### ACF and PACF on the original time series
```{r}
require(gridExtra)

plot5 = ggAcf(ts_adjusted)+ggtitle("ACF of SPY Adjusted Close Price")
plot6 = ggPacf(ts_adjusted)+ggtitle("PACF of SPY Adjusted Close Price")
grid.arrange(plot5, plot6,nrow=2)
```

The ACF shows a slow decay in correlation, it suggests that the original series is **non-stationary** and that there may be a trend or seasonality present.  A spike at lag 1 in the PACF suggests that the correlation between the observations separated by k time steps is significant, and that the first lag may be a good candidate for an autoregressive (AR) term in a time series model.

In order to make the dataset stationary for the future analysis, there will be two potential ways, detrending and differencing. 

### Augmented Dickey-Fuller Test
```{r}
# Perform ADF test
adf_test <- adf.test(ts_adjusted)

# Print the results
print(adf_test)
```

Since the p-value is less than 0.05 (assuming a 95% confidence level), then we can reject the null hypothesis that the time series is non-stationary, and conclude that the time series is stationary, which is different from my finding in the ACF plot. It is possible that there is some other factor that is affecting the results. It is also possible that the sample size is too small or the data is too noisy to draw reliable conclusions.

## Detrending and Differencing
```{r,message=FALSE, warning=FALSE}


fit = lm(ts_adjusted~time(ts_adjusted), na.action=NULL) 
# regress stock price on time
# time creates the vector of times at which a time series was sampled.

plot1<-autoplot(resid(fit), main="Detrended") 
plot2<-autoplot(diff(ts_adjusted), main="First Differences") 

grid.arrange(plot1, plot2,nrow=2)
```

From the graph we can see that detrending (the residuals of the linear regression model fit to the time series) the time series doesn't remove the  patterns or trends in the residuals, indicating the linear model is not a good fit for the data. 

However, difference (the change in value from one time period to the next) successfully make the distributed around zero, which means that there is no systematic increase or decrease in the values of the time series from one time period to the next. In other words, the difference between consecutive observations in the time series is centered around zero, indicating the first order differences of SPY is **stationary**.

### ACF and PACF plot on First Differences

```{r,message=FALSE, warning=FALSE}
plot3 <- ggAcf(diff(ts_adjusted))+ggtitle("ACF of First Differences of SPY Adjusted Close Price")
plot4 <- ggPacf(diff(ts_adjusted))+ggtitle("PACF of First Differences of SPY Adjusted Close Price")

grid.arrange(plot3, plot4,nrow=2)
```

Now the acf plot indicate the first difference of SPY adjusted close price is stationary and we could utilized it for further analysis such as the ARIMA modeling. 

## Linear regression on the fit the SPY dataset

```{r,message=FALSE, warning=FALSE}
library(knitr)
summary_table = summary(fit)$coefficients
# Extract the coefficient table from the summary

kable(summary_table, caption = "Regression Results", align = "c")
```

```{r, message=FALSE, warning= FALSE}
y=ts_adjusted
x=time(ts_adjusted)
DD<-data.frame(x,y)
ggp <- ggplot(DD, aes(x, y)) +           
  geom_line()

ggp +                                     
  stat_smooth(method = "lm",
              formula = y ~ x,
              geom = "smooth") +ggtitle("The adjusted SPY closed price")+ylab("Price(USD)")
```