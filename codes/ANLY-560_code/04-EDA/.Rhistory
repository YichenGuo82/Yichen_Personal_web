library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
library(zoo)
library(pracma)
library(lubridate)
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
tail(spx_breadth_data)
# Create a daily time series
spx_breadth_ts <- ts(spx_breadth_data$Breadth, start =decimal_date(as.Date("2020-04-07", format="%Y-%m-%d")), frequency = 365.25)
plot_ly(x=time(spx_breadth_ts), y=spx_breadth_ts, type = "scatter", mode="lines", name="temp") %>%
layout(xaxis= list(title = "Date",rangeslider = list(type = "date")),
yaxis= list(title = "Market Breath"),
title = "SPX Market Breadth")
spy <- getSymbols("SPY",auto.assign = FALSE, from = "2020-04-07",src="yahoo")
spy=data.frame(spy)
spy <- data.frame(spy,rownames(spy))
colnames(spy)[7] = "date"
spy$date<-as.Date(spy$date,"%Y-%m-%d")
plot_ly(spy, x = ~date, y = ~SPY.Adjusted, type = "scatter", mode = "lines") %>%
layout(title = "SPY Adjusted Price Time Series", yaxis = list(title = "SPY Price"))
ts_adjusted <- as.ts(spy[,"SPY.Adjusted"], frequency = 1)
# Perform ADF test
adf_test <- adf.test(ts_adjusted)
# Print the results
print(adf_test)
# Perform ADF test
adf_test <- adf.test(spx_breadth_ts)
# Print the results
print(adf_test)
library(flipbookr)
library(tidyverse)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
spx_breadth_ts <- ts(spx_breadth_data$Breadth, start =decimal_date(as.Date("2020-04-07", format="%Y-%m-%d")), frequency = 365.25)
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
spx_breadth_ts <- ts(spx_breadth_data$Breadth, start =decimal_date(as.Date("2020-04-07", format="%Y-%m-%d")), frequency = 365.25)
require(gridExtra)
plot5 = ggAcf(spx_breadth_data)+ggtitle("ACF of the Market Breadth")
plot6 = ggPacf(spx_breadth_data)+ggtitle("PACF of the Market Breadth")
grid.arrange(plot5, plot6,nrow=2)
# Perform ADF test
adf_test <- adf.test(spx_breadth_ts)
# Print the results
print(adf_test)
require(gridExtra)
plot5 = ggAcf(spx_breadth_ts)+ggtitle("ACF of the Market Breadth")
plot6 = ggPacf(spx_breadth_ts)+ggtitle("PACF of the Market Breadth")
grid.arrange(plot5, plot6,nrow=2)
# Perform ADF test
adf_test <- adf.test(spx_breadth_ts)
# Print the results
print(adf_test)
spx_breadth_data <- read_csv("spx_market_breadth.csv") %>%
mutate(Date = ymd(Date)) %>%
rename(Breadth = `0`)
spx_breadth_ts <- ts(spx_breadth_data$Breadth, start =decimal_date(as.Date("2020-04-07", format="%Y-%m-%d")), frequency = 365.25)
require(gridExtra)
plot5 = ggAcf(spx_breadth_ts)+ggtitle("ACF of the Market Breadth")
plot6 = ggPacf(spx_breadth_ts)+ggtitle("PACF of the Market Breadth")
grid.arrange(plot5, plot6,nrow=2)
# Perform ADF test
adf_test <- adf.test(spx_breadth_ts)
# Print the results
print(adf_test)
auto.arima(spx_breadth_ts)
# Initialize the ARIMA results list
ARMA_res <- list()
# Set a counter
cc <- 1
# Loop over AR (p) values
for (p in 1:3) {
# Loop over MA (q) values
for (q in 0:1) {
# Fit the ARIMA model
ARMA_res[[cc]] <- arima(x = spx_breadth_ts, order = c(p, 0, q))
# Increment the counter
cc <- cc + 1
}
}
# Get AIC and BIC values for model evaluation
ARMA_AIC <- sapply(ARMA_res, function(x) x$aic)
ARMA_BIC <- sapply(ARMA_res, function(x) x$bic)
# Find the index of the minimum AIC value
best_model <- ARMA_res[[which(ARMA_AIC == min(ARMA_AIC))]]
# Print the best model
print(best_model)
model_output = capture.output(arima(spx_breadth_ts, 3,0,1))
model_output = capture.output(Arima(spx_breadth_ts, 3,0,1))
# Fit the ARIMA(3, 0, 1) model
best_model <- Arima(spx_breadth_ts, order = c(3, 0, 1))
model_output = capture.output(best_model)
# Fit the ARIMA(3, 0, 1) model
best_model <- Arima(spx_breadth_ts, order = c(3, 0, 1))
capture.output(best_model)
# Fit the ARIMA(3, 0, 1) model
best_model <- Arima(spx_breadth_ts, order = c(3, 0, 1))
# Additional residual plots
par(mfrow = c(2, 2))
# Histogram of residuals
hist(best_model$residuals, breaks = 20, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")
# Kernel density plot of residuals
plot(density(best_model$residuals), main = "Kernel Density Plot of Residuals", xlab = "Residuals", ylab = "Density", col = "blue")
rug(best_model$residuals, col = "black")
# Q-Q plot of residuals
qqnorm(best_model$residuals, main = "Q-Q Plot of Residuals", col = "blue")
qqline(best_model$residuals, col = "red", lwd = 2)
# Scatter plot of residuals vs. fitted values
plot(fitted(best_model), best_model$residuals, main = "Residuals vs. Fitted Values", xlab = "Fitted Values", ylab = "Residuals", col = "blue", pch = 20)
abline(h = 0, col = "red", lwd = 2)
par(mfrow = c(1, 1))
# Fit the ARIMA(3, 0, 1) model
best_model <- Arima(spx_breadth_ts, order = c(3, 0, 1))
# Residual diagnostics
checkresiduals(best_model)
# Additional residual plots
par(mfrow = c(2, 2))
# Histogram of residuals
hist(best_model$residuals, breaks = 20, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")
# Kernel density plot of residuals
plot(density(best_model$residuals), main = "Kernel Density Plot of Residuals", xlab = "Residuals", ylab = "Density", col = "blue")
rug(best_model$residuals, col = "black")
# Q-Q plot of residuals
qqnorm(best_model$residuals, main = "Q-Q Plot of Residuals", col = "blue")
qqline(best_model$residuals, col = "red", lwd = 2)
# Scatter plot of residuals vs. fitted values
plot(fitted(best_model), best_model$residuals, main = "Residuals vs. Fitted Values", xlab = "Fitted Values", ylab = "Residuals", col = "blue", pch = 20)
abline(h = 0, col = "red", lwd = 2)
par(mfrow = c(1, 1))
autoplot(forecast(best_model))
forecast(best_model,10)
accuracy(best_model)
bench_fit <- snaive(spx_breadth_ts, h=24)
accuracy(bench_fit)
accuracy(best_model)
bench_fit <- snaive(spx_breadth_ts, h=24)
accuracy(bench_fit)
autoplot(spx_breadth_ts) +
autolayer(meanf(spx_breadth_tss, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(spx_breadth_ts, h=11),
series="Naïve", PI=FALSE) +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
autoplot(spx_breadth_ts) +
autolayer(meanf(spx_breadth_ts, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(spx_breadth_ts, h=11),
series="Naïve", PI=FALSE) +
ggtitle("Forecasts for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
autoplot(spx_breadth_ts) +
autolayer(meanf(spx_breadth_ts, h=11),
series="Mean", PI=FALSE) +
autolayer(naive(spx_breadth_ts, h=11),
series="Naïve", PI=FALSE) +
autolayer(forecast(best_model, h=11),
series="FInal ARIMA model", PI=FALSE) +
ggtitle("Forecasts for SPX market breadth") +
xlab("Year") + ylab("Market Breadth") +
guides(colour=guide_legend(title="Forecast"))
decompose(spx_breadth_ts)
autoplot(decompose(spx_breadth_ts))
