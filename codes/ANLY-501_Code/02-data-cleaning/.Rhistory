setwd("~/Dropbox/Mac/Desktop/Yichen Guo/Georgetown/Fall 2022/ANLY 501 Data Science and Analytics/codes/twitter_api")
knitr::opts_chunk$set(echo = TRUE)
library(selectr)
library(rvest)
library(xml2)
library(rtweet) # for scraping tweets
library(wordcloud2) # for generating really cool looking wordclouds
library(tm) # for text minning
library(dplyr) # loads of fun stuff including piping
library(ROAuth)
library(jsonlite)
library(httpuv)
### Setting API parameters
api = read.csv('Twitter_API.txt')
consumer_key = api[api["Type"]=="API Key"][2]
consumer_secret = api[api["Type"]=="API Key Secret"][2]
access_token = api[api["Type"]=="Access Token"][2]
access_token_secret = api[api["Type"]=="Access Token Secret"][2]
bearer_token = api[api["Type"]=="Bearer Token"][2]
# print(consumer_key)
# print(consumer_secret)
# print(access_token)
# print(access_token_secret)
# print(bearer_token)
### Extracting tweets
library(twitteR)
requestURL='https://api.twitter.com/oauth/request_token'
accessURL='https://api.twitter.com/oauth/access_token'
authURL='https://api.twitter.com/oauth/authorize'
s_key  = 'Worldcup'
n_tweets = 250
twitteR:::setup_twitter_oauth(consumer_key, consumer_secret,access_token,access_token_secret)
### Setting API parameters
api = read.csv('Twitter_API.txt')
consumer_key = api[api["Type"]=="API Key"][2]
consumer_secret = api[api["Type"]=="API Key Secret"][2]
access_token = api[api["Type"]=="Access Token"][2]
access_token_secret = api[api["Type"]=="Access Token Secret"][2]
bearer_token = api[api["Type"]=="Bearer Token"][2]
print(consumer_key)
print(consumer_secret)
print(access_token)
print(access_token_secret)
print(bearer_token)
### Setting API parameters
api = read.csv('Twitter_API.txt')
consumer_key = api[api["Type"]=="API Key"][2]
consumer_secret = api[api["Type"]=="API Key Secret"][2]
access_token = api[api["Type"]=="Access Token"][2]
access_token_secret = api[api["Type"]=="Access Token Secret"][2]
bearer_token = api[api["Type"]=="Bearer Token"][2]
print(consumer_key)
print(consumer_secret)
print(access_token)
print(access_token_secret)
print(bearer_token)
### Setting API parameters
api = read.csv('Twitter_API.txt')
consumer_key = api[api["Type"]=="API Key"][2]
consumer_secret = api[api["Type"]=="API Key Secret"][2]
access_token = api[api["Type"]=="Access Token"][2]
access_token_secret = api[api["Type"]=="Access Token Secret"][2]
bearer_token = api[api["Type"]=="Bearer Token"][2]
print(consumer_key)
print(consumer_secret)
print(access_token)
print(access_token_secret)
print(bearer_token)
### Setting API parameters
api = read.csv('Twitter_API.txt')
consumer_key = api[api["Type"]=="API Key"][2]
consumer_secret = api[api["Type"]=="API Key Secret"][2]
access_token = api[api["Type"]=="Access Token"][2]
access_token_secret = api[api["Type"]=="Access Token Secret"][2]
bearer_token = api[api["Type"]=="Bearer Token"][2]
print(consumer_key)
print(consumer_secret)
print(access_token)
print(access_token_secret)
print(bearer_token)
### Setting API parameters
api = read.csv('Twitter_API.txt')
consumer_key = api[api["Type"]=="API Key"][2]
consumer_secret = api[api["Type"]=="API Key Secret"][2]
access_token = api[api["Type"]=="Access Token"][2]
access_token_secret = api[api["Type"]=="Access Token Secret"][2]
bearer_token = api[api["Type"]=="Bearer Token"][2]
print(consumer_key)
print(consumer_secret)
print(access_token)
print(access_token_secret)
print(bearer_token)
### Extracting tweets
library(twitteR)
requestURL='https://api.twitter.com/oauth/request_token'
accessURL='https://api.twitter.com/oauth/access_token'
authURL='https://api.twitter.com/oauth/authorize'
s_key  = 'Worldcup'
n_tweets = 250
twitteR:::setup_twitter_oauth(consumer_key, consumer_secret,access_token,access_token_secret)
Search1<-twitteR::searchTwitter(s_key,n=n_tweets, since="2022-04-01")
# Search2<-twitteR::searchTwitter("#datascience",n=50, since="2022-01-01")
TweetsDF<- twListToDF(Search1)
#(TweetsDF$text[1])
### Saving the tweets to file
########## Place Tweets in a new file ###################
FName = "./data/MyFileExample.txt"
## Start the file
MyFile <- file(FName)
## Write Tweets to file
cat(unlist(TweetsDF), " ", file=MyFile, sep="\n")
### Extracting tweets
library(twitteR)
requestURL='https://api.twitter.com/oauth/request_token'
accessURL='https://api.twitter.com/oauth/access_token'
authURL='https://api.twitter.com/oauth/authorize'
s_key  = 'Worldcup'
n_tweets = 250
twitteR:::setup_twitter_oauth(consumer_key, consumer_secret,access_token,access_token_secret)
Search1<-twitteR::searchTwitter(s_key,n=n_tweets, since="2022-04-01")
# Search2<-twitteR::searchTwitter("#datascience",n=50, since="2022-01-01")
TweetsDF<- twListToDF(Search1)
#(TweetsDF$text[1])
### Saving the tweets to file
########## Place Tweets in a new file ###################
FName = "./SF_car_report.txt"
## Start the file
MyFile <- file(FName)
## Write Tweets to file
cat(unlist(TweetsDF), " ", file=MyFile, sep="\n")
close(MyFile)
setwd("~/anly-501-project-YichenG82619/codes/02-data-cleaning")
setwd("~/anly-501-project-YichenG82619/codes/02-data-cleaning")
knitr::opts_chunk$set(echo = TRUE)
rawdf = read.csv(file = './raw_filter.csv')
View(TweetsDF)
View(rawdf)
acident_days = count(rawd,'Incident.Day.of.Week' )
acident_days = count(rawdf,'Incident.Day.of.Week' )
View(acident_days)
View(acident_days)
str(rawdf)
incident_2022 = filter(rawdf, Incident.Year == '2022')
View(incident_2022)
incident_2018 = filter(rawdf, Incident.Year == '2018')
incident_2019 = filter(rawdf, Incident.Year == '2019')
incident_2020 = filter(rawdf, Incident.Year == '2020')
incident_2021 = filter(rawdf, Incident.Year == '2021')
acident_year = count(rawdf, 'Incident.Year' )
View(acident_year)
acident_year = table(rawdf$Incident.Year)
View(acident_days)
acident_year = table(rawdf$Incident.Year)
View(acident_days)
library(dplyr)
library('tidyverse')
library(plyr)
acident_year = table(rawdf$Incident.Year)
View(acident_days)
incidents =count(rawdf, 'Incident.Year')
View(incidents)
incidents_day = count(rawdf, 'Incident.Day.of.Week')
View(incidents_day)
incidents_year =count(rawdf, 'Incident.Year')
View(incidents_year)
View(incident_2021)
View(rawdf)
drops = c("Row.ID","CAD.Number","Report.Type.Code","Incident.Category","ESNCAG...Boundary.File","Central.Market.Tenderloin.Boundary.Polygon...Updated","Civic.Center.Harm.Reduction.Project.Boundary")
rawdf=rawdf[ , !(names(rawdf) %in% drops)]
incident_2018 = filter(rawdf, Incident.Year == '2018')
incident_2019 = filter(rawdf, Incident.Year == '2019')
incident_2020 = filter(rawdf, Incident.Year == '2020')
incident_2021 = filter(rawdf, Incident.Year == '2021')
incident_2022 = filter(rawdf, Incident.Year == '2022')
str(rawdf)
drops = c("Row.ID","CAD.Number","Report.Type.Code","Incident.Category","ESNCAG...Boundary.File","Central.Market.Tenderloin.Boundary.Polygon...Updated","Civic.Center.Harm.Reduction.Project.Boundary","HSOC.Zones.as.of.2018.06.05","Invest.In.Neighborhoods..IIN..Areas")
rawdf=rawdf[ , !(names(rawdf) %in% drops)]
incident_2018 = filter(rawdf, Incident.Year == '2018')
incident_2019 = filter(rawdf, Incident.Year == '2019')
incident_2020 = filter(rawdf, Incident.Year == '2020')
incident_2021 = filter(rawdf, Incident.Year == '2021')
incident_2022 = filter(rawdf, Incident.Year == '2022')
drops = c("Incident.Datetime","Row.ID","CAD.Number","Report.Type.Code","Incident.Category","ESNCAG...Boundary.File","Central.Market.Tenderloin.Boundary.Polygon...Updated","Civic.Center.Harm.Reduction.Project.Boundary","HSOC.Zones.as.of.2018.06.05","Invest.In.Neighborhoods..IIN..Areas")
rawdf=rawdf[ , !(names(rawdf) %in% drops)]
incident_2018 = filter(rawdf, Incident.Year == '2018')
incident_2019 = filter(rawdf, Incident.Year == '2019')
incident_2020 = filter(rawdf, Incident.Year == '2020')
incident_2021 = filter(rawdf, Incident.Year == '2021')
incident_2022 = filter(rawdf, Incident.Year == '2022')
write.csv(df,'./analytical_r.csv',row.names = FALSE)
write.csv(df,'./analytical_r.csv',row.names = FALSE)```
write.csv(incident_2018,'./incident_2018.csv',row.names = FALSE)
write.csv(incident_2019,'./incident_2019.csv',row.names = FALSE)
write.csv(incident_2020,'./incident_2020.csv',row.names = FALSE)
write.csv(incident_2021,'./incident_2021.csv',row.names = FALSE)
write.csv(incident_2022,'./incident_2022.csv',row.names = FALSE)
barplot(incidents_year)
View(incidents)
View(incidents_year)
library(ggplot2)
g = ggplot(incidents_year, aes(x=incidents_by_year,y=number_of_incidents))
g
g = ggplot(incidents_year, aes(x=incidents_year$Incident.Year,y=freq))
g
g = ggplot(incidents_year, aes(x=Incident.Year,y=freq))
g = ggplot(incidents_year, aes(x=Incident.Year,y=freq))
g
g
g = ggplot(incidents_year)+geom_bar(aes(Incident.Year))
g
g = ggplot(incidents_year)+geom_bar(aes(Incident.Year, freq))
g
g = ggplot(incidents_year)+geom_bar(aes(x=Incident.Year, y =freq))
g
g = ggplot(incidents_year)+geom_bar(aes(x=Incident.Year, fill=freq))
g
g = ggplot(incidents_year, aes(x=Incident.Year,y=freq))+geom_line(color="blue")
g
g = ggplot(incidents_day, aes(x=Incident.Day.of.Week,y=freq))+geom_line(color="blue")
g
g = ggplot(incidents_day, aes(x= Incident.Day.of.Week, y=freq))+geom_line(color="blue")
g
g = ggplot(incidents_year, aes(x=Incident.Year, y=freq))+geom_line(color="blue")
g
g = ggplot(incidents_year, aes(x=Incident.Year, y=freq))+geom_bar(color="blue")
g
g = ggplot(incidents_year, aes(x=Incident.Year))+geom_bar(color="blue")
g
g = ggplot(incidents_day, aes(x= Incident.Day.of.Week,y=freq))+geom_line(color="blue")
g
g = ggplot(incidents_day, aes(x= Incident.Day.of.Week,y=freq,fill=Incident.Day.of.Week))+geom_violin(trim=TRUE)
g
incidents_day$Incident.Day.of.Week
str(incidents_day)
library(plotly)
install.packages("plotly")
library(plotly)
fig =plot_ly(data= incidents_day, x = Incident.Day.of.Week, y= freq)
fig =plot_ly(data=incidents_day, x = ~Incident.Day.of.Week, y= ~freq)
fig
fig2 =plot_ly(data=incidents_year, x = ~Incident.Year, y= ~freq)
fig2
fig2 =plot_ly(data=incidents_year, type = 'scatter', mode='lines') %>% add_trace(x = ~Incident.Year, y= ~freq)
fig2
fig2 =plot_ly(data=incidents_year, type = 'scatter', mode='lines') %>% add_bars(x = ~Incident.Year, y= ~freq)
fig2
fig2 =plot_ly(data=incidents_year, type = 'scatter', mode='lines') %>% add_trace(x = ~Incident.Year, y= ~freq)
fig2
